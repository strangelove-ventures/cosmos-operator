####
# This is a full example with all options. Typically, use cosmos_v1_cosmosfullnode.yaml as a starting place.
###
apiVersion: cosmos.strange.love/v1
kind: CosmosFullNode
metadata:
  # Name should be the chain name and network environment.
  name: cosmoshub-mainnet
spec:
  replicas: 2

  # Blockchain specific config
  chain:
    network: mainnet
    chainID: cosmoshub-4
    binary: gaiad
    skipInvariants: true
    genesisURL: "https://github.com/cosmos/mainnet/raw/master/genesis.cosmoshub-4.json.gz"
    genesisScript: "arbitrary script to download genesis file. e.g. curl https://url-to-genesis.com | jq '.genesis' > $GENESIS_FILE"
    # Get latest snapshot at: https://www.polkachu.com/tendermint_snapshots/cosmos
    snapshotURL: "https://snapshots1.polkachu.com/snapshots/cosmos/cosmos_11701512.tar.lz4"
    snapshotScript: "arbitrary script to download snapshot from internet"
    logLevel: debug
    logFormat: json

    # CometBFT config (translates to config.toml)
    config:
      peers: "ee27245d88c632a556cf72cc7f3587380c09b469@45.79.249.253:26656,538ebe0086f0f5e9ca922dae0462cc87e22f0a50@34.122.34.67:26656,d3209b9f88eec64f10555a11ecbf797bb0fa29f4@34.125.169.233:26656,bdc2c3d410ca7731411b7e46a252012323fbbf37@34.83.209.166:26656"
      seeds: "cfd785a4224c7940e9a10f6c1ab24c343e923bec@164.68.107.188:26656,bf8328b66dceb4987e5cd94430af66045e59899f@public-seed.cosmos.vitwit.com:26656,d72b3011ed46d783e369fdf8ae2055b99a1e5074@173.249.50.25:26656"
      unconditionalPeerIDs: "ee27245d88c632a556cf72cc7f3587380c09b469,538ebe0086f0f5e9ca922dae0462cc87e22f0a50"
      privatePeerIDs: "ee27245d88c632a556cf72cc7f3587380c09b469,538ebe0086f0f5e9ca922dae0462cc87e22f0a50"
      maxInboundPeers: 10
      maxOutboundPeers: 10
      corsAllowedOrigins: ["*"]
      overrides: |-
        # Set config.toml overrides here. Such as:
        [tx_index]
        indexer = "null"

    # Cosmos SDK config (translates to app.toml)
    app:
      minGasPrice: "0.0025uatom"
      apiEnableUnsafeCORS: true
      grpcWebEnableUnsafeCORS: true
      # No need to set pruning in toml, set it here instead:
      pruning:
        strategy: "custom"
        interval: 17
        keepEvery: 1000
        keepRecent: 5000
        minRetainBlocks: 10000
      haltHeight: 12345678
      overrides: |-
        # Set app.toml overrides here. Such as:
        [rosetta]
        enable = true

  # Rolling deployment strategy
  strategy:
    # Can be an int like 1 or a percentage.
    maxUnavailable: 50%

  # Configure pods
  podTemplate:
    # Required
    image: "ghcr.io/strangelove-ventures/heighliner/gaia"
    resources:
      requests:
        cpu: "0.5"
      limits:
        cpu: "1"
    # Optional
    metadata:
      labels:
        extra: labels
      annotations:
        extra: annotations
    imagePullPolicy: "Always"
    imagePullSecrets:
      - name: name-of-kube-secret
    nodeSelector:
      nodeLabel: value
    # Lots of options for pod affinity. Generally not necessary if resources specified appropriately. See: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#an-example-of-a-pod-that-uses-pod-affinity
    affinity: {}
    # See https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
    tolerations: []
    priorityClassName: name-of-priority-class
    priority: 1000
    probes:
      # Disable all probes.
      strategy: None
    # The following fields are strategically merged into the default pod spec.
    # Use only in extreme circumstances. Serves as an "escape hatch" in case a chain does not adhere to standards.
    initContainers: []
    containers: []
    volumes: []

  # Configures kube services created by the operator.
  service:
    # Creates N LoadBalancer services and exposes those public IPs in p2p.
    maxP2PExternalAddresses: 1
    # Configures all p2p services that need external addresses.
    p2pTemplate:
      metadata:
        labels:
          extra: labels
        annotations:
          extra: annotations
      type: NodePort
    # Configures the main service that load balances all RPC ports. Custom configuration likely necessary for Ingress.
    rpcTemplate:
      metadata:
        labels:
          extra: labels
        annotations:
          extra: annotations
      type: NodePort
      externalTrafficPolicy: Local

  # Retain or Delete. If Retain, PVCs are not deleted as replicas change.
  volumeRetentionPolicy: "Retain"

  # Configure PVCs for each pod
  volumeClaimTemplate:
    # Required
    storageClassName: "standard-rwo"
    resources:
      requests:
        storage: 100Gi
    # Useful for restoring from VolumeSnapshot. Can also restore from PVC but new pod must be in same region.
    dataSource:
      apiGroup: snapshot.storage.k8s.io
      kind: VolumeSnapshot
      name: "name-of-volume-snapshot"
    # Discover and use data sources dynamically.
    autoDataSource:
      # Choose the most recent VolumeSnapshot matching selector.
      volumeSnapshotSelector:
        label: value
    # Optional
    metadata:
      labels:
        extra: labels
      annotations:
        extra: annotations
    accessModes: ["ReadWriteMany"]
    volumeMode: "Block"

  # Optional self-healing strategies.
  selfHeal:
    # Reboot pods that fall to far behind and still report as in-sync.
    heightDriftMitigation:
      threshold: 10
    # Automatically expand PVCs that are running out of space.
    pvcAutoScale:
      increaseQuantity: 10%
      maxSize: 5Ti
      usedSpacePercentage: 90

  # Allow overriding single instances which is a pod + pvc combination.
  instanceOverrides:
    # Key is the name of the instance which is the name of the pod.
    cosmoshub-1:
      # If 'All', operator will not manage pod or pvc. If 'Pod', operator will not manage pod but continue to manage pvc.
      disable: "All|Pod"
      # This is the same as the top-level volumeClaimTemplate. However, this template only applies to this single instance.
      # Allows you to restore or tweak a PVC that has been corrupted.
      volumeClaimTemplate: {}